// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/livros.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LivroService_ListarLivros_FullMethodName   = "/livros.LivroService/ListarLivros"
	LivroService_AdicionarLivro_FullMethodName = "/livros.LivroService/AdicionarLivro"
	LivroService_BuscarLivro_FullMethodName    = "/livros.LivroService/BuscarLivro"
)

// LivroServiceClient is the client API for LivroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivroServiceClient interface {
	ListarLivros(ctx context.Context, in *Vazio, opts ...grpc.CallOption) (*ListaLivros, error)
	AdicionarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*LivroResposta, error)
	BuscarLivro(ctx context.Context, in *LivroID, opts ...grpc.CallOption) (*Livro, error)
}

type livroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLivroServiceClient(cc grpc.ClientConnInterface) LivroServiceClient {
	return &livroServiceClient{cc}
}

func (c *livroServiceClient) ListarLivros(ctx context.Context, in *Vazio, opts ...grpc.CallOption) (*ListaLivros, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaLivros)
	err := c.cc.Invoke(ctx, LivroService_ListarLivros_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livroServiceClient) AdicionarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*LivroResposta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivroResposta)
	err := c.cc.Invoke(ctx, LivroService_AdicionarLivro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livroServiceClient) BuscarLivro(ctx context.Context, in *LivroID, opts ...grpc.CallOption) (*Livro, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Livro)
	err := c.cc.Invoke(ctx, LivroService_BuscarLivro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivroServiceServer is the server API for LivroService service.
// All implementations must embed UnimplementedLivroServiceServer
// for forward compatibility.
type LivroServiceServer interface {
	ListarLivros(context.Context, *Vazio) (*ListaLivros, error)
	AdicionarLivro(context.Context, *Livro) (*LivroResposta, error)
	BuscarLivro(context.Context, *LivroID) (*Livro, error)
	mustEmbedUnimplementedLivroServiceServer()
}

// UnimplementedLivroServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLivroServiceServer struct{}

func (UnimplementedLivroServiceServer) ListarLivros(context.Context, *Vazio) (*ListaLivros, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarLivros not implemented")
}
func (UnimplementedLivroServiceServer) AdicionarLivro(context.Context, *Livro) (*LivroResposta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdicionarLivro not implemented")
}
func (UnimplementedLivroServiceServer) BuscarLivro(context.Context, *LivroID) (*Livro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuscarLivro not implemented")
}
func (UnimplementedLivroServiceServer) mustEmbedUnimplementedLivroServiceServer() {}
func (UnimplementedLivroServiceServer) testEmbeddedByValue()                      {}

// UnsafeLivroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivroServiceServer will
// result in compilation errors.
type UnsafeLivroServiceServer interface {
	mustEmbedUnimplementedLivroServiceServer()
}

func RegisterLivroServiceServer(s grpc.ServiceRegistrar, srv LivroServiceServer) {
	// If the following call pancis, it indicates UnimplementedLivroServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LivroService_ServiceDesc, srv)
}

func _LivroService_ListarLivros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vazio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivroServiceServer).ListarLivros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivroService_ListarLivros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivroServiceServer).ListarLivros(ctx, req.(*Vazio))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivroService_AdicionarLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivroServiceServer).AdicionarLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivroService_AdicionarLivro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivroServiceServer).AdicionarLivro(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivroService_BuscarLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivroID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivroServiceServer).BuscarLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivroService_BuscarLivro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivroServiceServer).BuscarLivro(ctx, req.(*LivroID))
	}
	return interceptor(ctx, in, info, handler)
}

// LivroService_ServiceDesc is the grpc.ServiceDesc for LivroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LivroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "livros.LivroService",
	HandlerType: (*LivroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListarLivros",
			Handler:    _LivroService_ListarLivros_Handler,
		},
		{
			MethodName: "AdicionarLivro",
			Handler:    _LivroService_AdicionarLivro_Handler,
		},
		{
			MethodName: "BuscarLivro",
			Handler:    _LivroService_BuscarLivro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/livros.proto",
}
